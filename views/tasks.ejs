<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>taches</title>
  <link rel="stylesheet" href="/css/taches.css" />
  <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
</head>
<div id="add">
  <h1>Tâches pour le <%= new Date(date).toLocaleDateString('fr-FR') %></h1>
  <a href="/calendar">◀</a>

  <form action="/tasks/add" method="POST">
    <input type="hidden" name="date" value="<%= date %>" />
    <input
      class="input"
      type="text"
      name="description"
      placeholder="Nouvelle tâche"
      required
    />
    <input class="input" type="time" name="time" required />
    <!-- Barre de recherche pour les lieux -->
    <input id="search" type="text" placeholder="Rechercher un lieu" />
    <button id="btn1" type="submit">Ajouter</button>
    <!-- Carte interactive -->
    <div id="map">
      <button
        id="centerUser"
        style="position: absolute; top: 10px; right: 10px; z-index: 1000"
      >
        Recentrer
      </button>
    </div>

    <!-- Champs cachés pour les coordonnées -->
    <input type="hidden" name="latitude" id="latitude" />
    <input type="hidden" name="longitude" id="longitude" />
    <button id="btn" type="submit">Ajouter</button>
  </form>
</div>
<div id="liste-tache">
  <ul>
    <% tasks.forEach((task) => { %>
    <li>
      <form
        action="/tasks/update/<%= task.id %>"
        method="POST"
        style="display: inline"
      >
        <input type="hidden" name="date" value="<%= date %>" />
        <input
          type="text"
          name="description"
          value="<%= task.description %>"
          required
        />
        <input type="time" name="time" value="<%= task.time %>" required />
        <button type="submit">Modifier</button>
      </form>
      <form
        action="/tasks/delete/<%= task.id %>"
        method="POST"
        style="display: inline"
      >
        <input type="hidden" name="date" value="<%= date %>" />
        <button type="submit">Supprimer</button>
      </form>
    </li>
    <% }) %>
  </ul>
</div>
<script>
  // Initialisation de la carte avec Leaflet
  const map = L.map("map").setView([0, 0], 2);

  // Charger les tuiles OpenStreetMap
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    maxZoom: 19,
  }).addTo(map);

  let userMarker; // Marqueur pour la localisation de l'utilisateur
  let taskMarker; // Marqueur pour la tâche
  let userPosition; // Stocke la position actuelle de l'utilisateur

  // Géolocalisation de l'utilisateur
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords;
        userPosition = { lat: latitude, lng: longitude };
        map.setView([latitude, longitude], 15); // Centrer la carte sur l'utilisateur
        userMarker = L.marker([latitude, longitude], { title: "Vous êtes ici" })
          .addTo(map)
          .bindPopup("Votre position actuelle")
          .openPopup();
      },
      (error) => {
        console.error("Erreur de géolocalisation :", error.message);
      }
    );
  } else {
    console.error("La géolocalisation n'est pas supportée par ce navigateur.");
  }

  // Ajouter un marqueur interactif pour la tâche
  map.on("click", function (e) {
    addTaskMarker(e.latlng.lat, e.latlng.lng);
  });

  // Fonction pour ajouter un marqueur pour la tâche
  function addTaskMarker(lat, lng) {
    if (taskMarker) map.removeLayer(taskMarker); // Supprimer l'ancien marqueur
    taskMarker = L.marker([lat, lng]).addTo(map);
    document.getElementById("latitude").value = lat;
    document.getElementById("longitude").value = lng;
  }

  // Recherche d'adresse avec Nominatim
  // Recherche d'adresse avec Nominatim
  const searchInput = document.getElementById("search");

  searchInput.addEventListener("input", async function () {
    const query = this.value.trim(); // Supprime les espaces inutiles

    if (query === "") {
      // Si la barre est vide, recentrer sur la position de l'utilisateur
      if (userPosition) {
        map.setView([userPosition.lat, userPosition.lng], 15);
      }
      return; // Ne pas exécuter la suite
    }

    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/search?format=json&q=${query}`
      );
      const results = await response.json();

      if (results.length > 0) {
        const { lat, lon, display_name } = results[0];
        addTaskMarker(lat, lon);
        map.setView([lat, lon], 15); // Zoom sur l'emplacement
        console.log(`Lieu trouvé : ${display_name}`);
      }
    } catch (error) {
      console.error("Erreur lors de la recherche d'adresse :", error);
    }
  });

  // Gestion du bouton "Recentrer sur ma position"
  document.getElementById("centerUser").addEventListener("click", (event) => {
    event.preventDefault(); // Empêche tout comportement par défaut
    if (userPosition) {
      map.setView([userPosition.lat, userPosition.lng], 15); // Recentrer la carte
      if (userMarker) userMarker.openPopup(); // Afficher le popup du marqueur utilisateur
    } else {
      alert(
        "Position utilisateur introuvable. Assurez-vous que la géolocalisation est activée."
      );
    }
  });
  // Suivi de la position de l'utilisateur
  // function trackUserLocation() {
  //   if (navigator.geolocation) {
  //     navigator.geolocation.watchPosition(
  //       async (position) => {
  //         const { latitude, longitude } = position.coords;

  //         // Envoyer la position au serveur
  //         const response = await fetch("/tasks/checkProximity", {
  //           method: "POST",
  //           headers: { "Content-Type": "application/json" },
  //           body: JSON.stringify({ latitude, longitude }),
  //         });

  //         const nearTasks = await response.json();
  //         if (nearTasks.length > 0) {
  //           nearTasks.forEach((task) => {
  //             alert(
  //               `Rappel : La tâche "${task.description}" est prévue dans moins de 5 minutes !`
  //             );
  //           });
  //         } else {
  //           console.log("Aucune tâche imminente détectée.");
  //         }
  //       },
  //       (error) => {
  //         console.error("Erreur de géolocalisation :", error.message);
  //       },
  //       { enableHighAccuracy: true }
  //     );
  //   } else {
  //     alert("Votre navigateur ne supporte pas la géolocalisation.");
  //   }
  // }

  // // Appeler la fonction
  // trackUserLocation();
  // if (Notification.permission !== "granted") {
  //   Notification.requestPermission().then((permission) => {
  //     if (permission === "granted") {
  //       console.log("Notifications autorisées !");
  //     } else {
  //       console.log("Notifications refusées.");
  //     }
  //   });
  // }
  // function sendNotification(task) {
  //   if (Notification.permission === "granted") {
  //     const notification = new Notification("Rappel de tâche", {
  //       body: `La tâche "${task.description}" est prévue dans moins de 5 minutes.`,
  //       icon: "/path/to/icon.png", // Facultatif
  //     });

  //     notification.onclick = () => {
  //       window.focus(); // Recentre l'utilisateur sur l'application
  //     };
  //   }
  // }
  // if (nearTasks.length > 0) {
  //   nearTasks.forEach((task) => {
  //     sendNotification(task);
  //   });
  // }
</script>
